//Editando proyecto








#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>
#include <string>
#include <stdexcept>
#include <ctime>
#include <limits>

using namespace std;

// ============================
// ESTRUCTURAS DE DATOS
// ============================

struct Libro {
    string id;
    string titulo;
    string autor;
    int copias;
};

struct Prestamo {
    string idAlumno;
    string nombreAlumno;
    string idLibro;
    string fecha;
};

// ============================
// FUNCIONES AUXILIARES
// ============================

bool esNumero(const string &s) {
    for (char c : s) {
        if (!isdigit(c)) return false;
    }
    return true;
}

string obtenerFechaActual() {
    time_t t = time(nullptr);
    tm *now = localtime(&t);
    char buffer[11];
    strftime(buffer, 11, "%d/%m/%Y", now);
    return string(buffer);
}

void pausar() {
    cout << "\nPresione ENTER para continuar...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

// ============================
// FUNCIONES DE ARCHIVOS
// ============================

void cargarCatalogo(vector<Libro> &catalogo) {
    ifstream archivo("catalogo.txt");
    if (!archivo) return;
    Libro l;
    while (archivo >> l.id) {
        archivo.ignore();
        getline(archivo, l.titulo);
        getline(archivo, l.autor);
        archivo >> l.copias;
        archivo.ignore();
        catalogo.push_back(l);
    }
    archivo.close();
}

void guardarCatalogo(const vector<Libro> &catalogo) {
    ofstream archivo("catalogo.txt");
    for (const auto &l : catalogo) {
        archivo << l.id << endl;
        archivo << l.titulo << endl;
        archivo << l.autor << endl;
        archivo << l.copias << endl;
    }
    archivo.close();
}

void cargarPrestamos(vector<Prestamo> &prestamos) {
    ifstream archivo("prestamos.txt");
    if (!archivo) return;
    Prestamo p;
    while (archivo >> p.idAlumno) {
        archivo.ignore();
        getline(archivo, p.nombreAlumno);
        archivo >> p.idLibro;
        archivo.ignore();
        getline(archivo, p.fecha);
        prestamos.push_back(p);
    }
    archivo.close();
}

void guardarPrestamos(const vector<Prestamo> &prestamos) {
    ofstream archivo("prestamos.txt");
    for (const auto &p : prestamos) {
        archivo << p.idAlumno << endl;
        archivo << p.nombreAlumno << endl;
        archivo << p.idLibro << endl;
        archivo << p.fecha << endl;
    }
    archivo.close();
}

// ============================
// FUNCIONES PRINCIPALES
// ============================

void ingresarLibro(vector<Libro> &catalogo) {
    cout << "\n------------------------------------\n";
    cout << "    INGRESAR REGISTRO AL CATÁLOGO\n";
    cout << "------------------------------------\n";

    Libro nuevo;
    while (true) {
        cout << "Ingrese ID de libro (6 dígitos): ";
        cin >> nuevo.id;
        if (nuevo.id.length() != 6 || !esNumero(nuevo.id)) {
            cout << "Valor inválido, inténtelo de nuevo.\n";
            continue;
        }
        bool existe = false;
        for (auto &l : catalogo)
            if (l.id == nuevo.id) existe = true;
        if (existe) {
            cout << "ID ya existe.\n";
            continue;
        }
        break;
    }
    cin.ignore();
    cout << "Ingrese título: ";
    getline(cin, nuevo.titulo);
    cout << "Ingrese autor: ";
    getline(cin, nuevo.autor);
    do {
        cout << "Ingrese número de copias disponibles (0-9): ";
        string cop;
        cin >> cop;
        if (!esNumero(cop) || stoi(cop) < 0 || stoi(cop) > 9) {
            cout << "Valor inválido, inténtelo de nuevo.\n";
            continue;
        }
        nuevo.copias = stoi(cop);
        break;
    } while (true);

    catalogo.push_back(nuevo);
    guardarCatalogo(catalogo);
    cout << "\n✔ Libro \"" << nuevo.titulo << "\" (ID: " << nuevo.id << ") registrado con éxito.\n";
}

void mostrarCatalogo(const vector<Libro> &catalogo) {
    cout << "\n------------------------------------\n";
    cout << "          CATÁLOGO DE LIBROS\n";
    cout << "------------------------------------\n";
    cout << left << setw(8) << "ID" << " | "
         << setw(20) << "Título" << " | "
         << setw(25) << "Autor" << " | "
         << "Disponibles\n";
    cout << string(70, '-') << "\n";
    for (auto &l : catalogo) {
        cout << setw(8) << l.id << " | "
             << setw(20) << l.titulo.substr(0, 20) << " | "
             << setw(25) << l.autor.substr(0, 25) << " | "
             << l.copias << "\n";
    }
    cout << "\nTotal de registros: " << catalogo.size() << "\n";
    pausar();
}

void registrarPrestamo(vector<Libro> &catalogo, vector<Prestamo> &prestamos) {
    cout << "\n------------------------------------\n";
    cout << "       REGISTRAR NUEVO PRÉSTAMO\n";
    cout << "------------------------------------\n";

    Prestamo nuevo;
    cout << "Ingrese ID de alumno (9 dígitos): ";
    cin >> nuevo.idAlumno;
    if (nuevo.idAlumno.length() != 9 || !esNumero(nuevo.idAlumno)) {
        cout << "Valor inválido.\n";
        return;
    }
    cin.ignore();
    cout << "Ingrese nombre del alumno: ";
    getline(cin, nuevo.nombreAlumno);
    cout << "Ingrese ID de libro (6 dígitos): ";
    cin >> nuevo.idLibro;
    if (nuevo.idLibro.length() != 6 || !esNumero(nuevo.idLibro)) {
        cout << "Valor inválido.\n";
        return;
    }

    // Buscar libro
    for (auto &l : catalogo) {
        if (l.id == nuevo.idLibro) {
            cout << "\nLibro encontrado:\n";
            cout << "  Título      : " << l.titulo << "\n";
            cout << "  Disponibles : " << l.copias << "\n";
            if (l.copias <= 0) {
                cout << "No hay copias disponibles.\n";
                return;
            }
            cout << "¿Confirmar préstamo? (S/N): ";
            char conf; cin >> conf;
            if (toupper(conf) == 'S') {
                l.copias--;
                nuevo.fecha = obtenerFechaActual();
                prestamos.push_back(nuevo);
                guardarCatalogo(catalogo);
                guardarPrestamos(prestamos);
                cout << "\n✔ Préstamo registrado con éxito.\n";
            }
            return;
        }
    }
    cout << "Libro no encontrado.\n";
}

void devolverLibro(vector<Libro> &catalogo, vector<Prestamo> &prestamos) {
    cout << "\n------------------------------------\n";
    cout << "         DEVOLVER LIBRO\n";
    cout << "------------------------------------\n";
    string idA, idL;
    cout << "Ingrese ID de alumno (9 dígitos): ";
    cin >> idA;
    cout << "Ingrese ID de libro (6 dígitos): ";
    cin >> idL;

    for (size_t i = 0; i < prestamos.size(); i++) {
        if (prestamos[i].idAlumno == idA && prestamos[i].idLibro == idL) {
            cout << "\nPréstamo encontrado:\n";
            cout << "  Alumno   : " << prestamos[i].nombreAlumno << "\n";
            cout << "  Libro ID : " << prestamos[i].idLibro << "\n";
            cout << "  Fecha    : " << prestamos[i].fecha << "\n";
            cout << "¿Confirmar devolución? (S/N): ";
            char conf; cin >> conf;
            if (toupper(conf) == 'S') {
                // Aumentar copias
                for (auto &l : catalogo)
                    if (l.id == idL)
                        l.copias++;
                prestamos.erase(prestamos.begin() + i);
                guardarCatalogo(catalogo);
                guardarPrestamos(prestamos);
                cout << "✔ Libro devuelto con éxito.\n";
            }
            return;
        }
    }
    cout << "Préstamo no encontrado.\n";
}

void verHistorial(const vector<Prestamo> &prestamos) {
    cout << "\n------------------------------------\n";
    cout << "      HISTORIAL DE PRÉSTAMOS\n";
    cout << "------------------------------------\n";
    cout << left << setw(12) << "Alumno ID" << " | "
         << setw(15) << "Nombre" << " | "
         << setw(8) << "Libro ID" << " | "
         << "Fecha\n";
    cout << string(55, '-') << "\n";
    for (auto &p : prestamos) {
        cout << setw(12) << p.idAlumno << " | "
             << setw(15) << p.nombreAlumno.substr(0, 15) << " | "
             << setw(8) << p.idLibro << " | "
             << p.fecha << "\n";
    }
    cout << "\nTotal de préstamos registrados: " << prestamos.size() << "\n";
    pausar();
}

// ============================
// MENÚ PRINCIPAL
// ============================

void mostrarMenu() {
    cout << "\n====================================\n";
    cout << "      SISTEMA DE BIBLIOTECA C++\n";
    cout << "====================================\n";
    cout << "1. Ingresar registro al catálogo\n";
    cout << "2. Mostrar catálogo\n";
    cout << "3. Registrar nuevo préstamo\n";
    cout << "4. Devolver libro\n";
    cout << "5. Ver historial de préstamos\n";
    cout << "6. Salir\n";
    cout << "Ingrese una opción: ";
}

// ============================
// FUNCIÓN MAIN
// ============================

int main() {
    vector<Libro> catalogo;
    vector<Prestamo> prestamos;

    try {
        cargarCatalogo(catalogo);
        cargarPrestamos(prestamos);
    } catch (...) {
        cerr << "Error al cargar archivos.\n";
    }

    int opcion;
    do {
        mostrarMenu();
        cin >> opcion;
        if (cin.fail()) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Valor inválido, inténtelo de nuevo.\n";
            continue;
        }

        switch (opcion) {
            case 1: ingresarLibro(catalogo); break;
            case 2: mostrarCatalogo(catalogo); break;
            case 3: registrarPrestamo(catalogo, prestamos); break;
            case 4: devolverLibro(catalogo, prestamos); break;
            case 5: verHistorial(prestamos); break;
            case 6:
                cout << "\n------------------------------------\n";
                cout << "Gracias por usar el Sistema de Biblioteca C++.\n";
                cout << "¡Hasta pronto!\n";
                cout << "------------------------------------\n";
                break;
            default:
                cout << "Valor inválido, inténtelo de nuevo.\n";
        }
    } while (opcion != 6);

    return 0;
}
